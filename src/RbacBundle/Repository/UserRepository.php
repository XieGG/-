<?php
namespace RbacBundle\Repository;

use Doctrine\ORM\Mapping\OrderBy;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository implements UserLoaderInterface
{
    public function getPageQuery()
    {
        return $this->createQueryBuilder('u')
            ->orderBy('u.cREATEAT', 'desc')
            ->getQuery()
            ->getResult();
    }

    /**
     * 获取管理处用户
     * @param unknown $dId
     */
    public function getWaterUser($dId){
        return $this->createQueryBuilder('u')
        ->select('u.id','u.username','u.truename','u.mobile','u.headPortrait','u.status','u.createAt','r.rolename rname','d.id did','d.name dname')
        ->join('u.group', 'r')
        ->join('u.department', 'd')
        ->where('d.id = :dId')
        ->andWhere('u.status = 1')
        ->setParameter('dId', $dId)
        ->getQuery()
        ->getResult();
    }

    /**
     * 搜索指定管理处用户
     * @param $dId
     * @param $name
     * @param $mobile
     * @return array
     */
    public function getSearchUser($dId,$search){
        $qb=$this->createQueryBuilder('u');
        $qb ->select('u.id','u.username','u.truename','u.mobile','u.headPortrait','u.status','u.createAt','r.rolename rname','d.name dname')
            ->join('u.group', 'r')
            ->join('u.department', 'd')
            ->where('d.id = :dId')
            ->andWhere('u.status = 1');
        if (!empty($search)){
            $qb->andwhere('u.username LIKE :search or u.mobile LIKE :search')
                ->setParameter('search', '%'.$search.'%');
        }
        return $qb ->setParameter('dId', $dId)->getQuery()->getResult();
    }
    /**
     * 获取指定管理处用户id
     * @param $dId
     * @return array
     */
    public function getSearchUserid($dId){
        $qb=$this->createQueryBuilder('u');
        $qb ->select('u.id')
            ->where('u.departmentId = :dId')
            ->andWhere('u.status = 1');
        return $qb ->setParameter('dId', $dId)->getQuery()->getResult();
    }


    /**
     * 获取用户详情
     * @param $Id
     * @return array
     */
    public function getUser($Id){
        return $this->createQueryBuilder('u')
            ->select('u.id','u.username','u.truename','u.mobile','u.roomNumber','u.oph','u.headPortrait','u.status','u.createAt','u.ip','r.rolename rname','d.name dname')
            ->join('u.group', 'r')
            ->join('u.department', 'd')
            ->where('u.id = :Id')
            ->andWhere('u.status = 1')
            ->setParameter('Id', $Id)
            ->getQuery()
            ->getResult();
    }

    /**
     * 获取流程审批人
     * @param unknown $did
     * @param unknown $rid
     */
    public function getApprovers($did,$rid){
        $qb = $this->createQueryBuilder('u')
        ->select('u.id','u.username')
        ->where('u.status = 1');
        if(!empty($did)){
            $qb->andWhere('u.departmentId = :did')
            ->setParameter('did', $did);
        }
        if(!empty($rid)){
            $qb->andWhere('u.roleId = :rid')
            ->setParameter('rid', $rid);
        }
        return $qb->getQuery()->getResult();
    }
    
    /**
     * 后台系统设置用户列表
     * @return multitype:
     */
    public function getUserList()
    {
        return $this->createQueryBuilder('u')
            ->select('u.roleId','u.id','u.truename tname', 'u.username','u.status', 'u.createAt', 'u.updateAt', 'r.rolename')
            ->join('u.group', 'r')
            ->OrderBy('u.id','ASC')
            ->OrderBy('r.id','ASC')
            ->getQuery()
            ->getResult();
    }
    
    public function validRepetition($modile,$truename){
        return $this->createQueryBuilder('u')
        ->select('count(u.id)')
        ->where('u.mobile = :mobile')
        ->orWhere('u.truename = :truename')
        ->setParameters(['mobile' => $modile,'truename' => $truename])
        ->getQuery()
        ->getResult();
    }
    /**
     * DQL is easier to read as it is very similar to SQL. 
     */
    public function getList2()
    {
        return $this->getEntityManager()->createQuery(
            'SELECT u.id, u.username,u.createAt,u.updateAt, r.rolename FROM RbacBundle:User u
            JOIN u.role r
            WHERE u.status = :status'
        )->setParameter('status', 1)->getResult();
    }
    
    //获取用户姓名
    public function getUserName($ids){
        $user = [];
        $ids = explode(',',$ids);
        $users = $this->createQueryBuilder('u')
        ->select('u.username')
        ->where('u.status = 1')
        ->andWhere('u.id in (:ids)')
        ->setParameter('ids', $ids)
        ->getQuery()
        ->getResult();
        foreach ($users as $k => $v){
            $user[] = $v['username'];
        }
        return $user = implode(',',$user);
    }
    
    public function loadUserByUsername($username)
    {
        return $this->findOneBy([
            'uSERNAME' => $username
        ]);
    }
    
    /**
     *      * 判断是否是手机号
     */
    private function isMobile($mobile)
    {
        return preg_match('#^13[\d]{9}$|^14[5,7]{1}\d{8}$|^15[^4]{1}\d{8}$|^17[0,6,7,8]{1}\d{8}$|^18[\d]{9}$#', $mobile);
    }

    public function getList($page){
        $offset=($page-1)*10;
        $qb=$users = $this->createQueryBuilder('u')
            ->select('u.id ,u.xM');
        $qb->setMaxResults(10);
        if($offset >= 0){
            $qb->setFirstResult($offset);
        }
        return $qb->getQuery()->getResult();
    }

    public function getLists($level = '',$jgbm = ''){
        $qb=$users = $this->createQueryBuilder('u')
            ->select('u.id ,u.xM');
        if (!empty($jgbm) && !empty($level)) {

            if( $level == '2')
            {
                $qb->andWhere('u.jZJGSZDSSFJ = :jgbm');
            }elseif ($level == '3')
            {
                $qb->andWhere('u.jZJGSZQXSFJ = :jgbm');
            }elseif ($level == '4')
            {
                $qb->andWhere('u.jZJGSZSFS = :jgbm');
            }
            $qb->setParameter('jgbm',$jgbm);
        }
        return $qb->getQuery()->getResult();
    }
}
